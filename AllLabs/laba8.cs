namespace AllLabs;
/*Задание. В соответствии с условием задачи Вы должны:
 Описать все необходимые классы, их поля и методы.
 Если по задаче имеет смысл, то используйте перегрузку операций.
 При необходимости вызывайте конструктор базового класса из конструктора
класса-потомка.
 Должны инициализироваться все поля каждого класса.
 Создайте программу, демонстрирующую работу с классами, не являющимися
абстрактными (абстрактные классы демонстрируются косвенно через
использование потомков). Демонстрация должна охватывать все реализованные
методы.
 Если в программе имеются виртуальные методы, то программы должна
демонстрировать их использование с помощью механизма позднего связывания.*/

/*Вариант 12 *. Создать класс математической функции одного аргумента,
определенной для всех вещественных чисел. Данный класс должен содержать
виртуальные методы печати функции, вычисления значения функции для данного
аргумента и вычисления объекта-функции, являющегося производной данной функции.
От класса математической функции с помощью наследования получить следующие
производные классы функций вида:
 F(x) = A * sin(B * x)
 G(x)= A * cos(B * x)
 Q(x) = A * x ^2 + B * x + C
 L(x) = A * x + B
 C(x) = A
В производных классах должны быть реализованы все виртуальные методы базового
класса. Также должны быть реализованы методы доступа к коэффициентам функций на
чтение и запись.*/

public class laba8
{
    public void Main()
    {
        Functions funcF = new FunctionFx();
        Functions funcG = new FunctionGx();
        Functions funcQ = new FunctionQx();
        Functions funcL = new FunctionLx();
        Functions funcC = new FunctionCx();

        Console.WriteLine("Какую функцию вы хотите вызвать?\n" +
                          "F(x) = A * sin(B * x)\n" +
                          "G(x)= A * cos(B * x)\n" +
                          "Q(x) = A * x ^2 + B * x + C\n" +
                          "L(x) = A * x + B\n" +
                          "C(x) = A\n");

        char choose = char.Parse(Console.ReadLine()!);
       switch (choose)
       {
           case 'F': funcF.ReadFunction(); break;
           case 'G': funcG.ReadFunction(); break;
           case 'Q': funcQ.ReadFunction(); break;
           case 'L': funcL.ReadFunction(); break;
           case 'C': funcC.ReadFunction(); break;
           default: Console.WriteLine("Нет такой функции"); break;
       } 
    }
}